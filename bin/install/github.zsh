#!/usr/bin/env zsh

# This script handles adding the SSH key generated by install/ssh.zsh to GitHub
# and verifying the SSH connection to GitHub is working.

set -e

source "$HOME/Repos/ooloth/dotfiles/config/zsh/banners.zsh"
info "üîë Adding SSH key pair to GitHub"

ssh_dir="$HOME/.ssh"
private_key_path="$ssh_dir/id_rsa"
public_key_path="$private_key_path.pub"

i_can_connect_to_github_via_ssh() {
  ssh -T git@github.com >/dev/null 2>&1
}

if i_can_connect_to_github_via_ssh; then
  printf "\n‚úÖ You can already connect to GitHub via SSH.\n"
  return
fi

if [[ ! -s "$private_key_path" || ! -s "$public_key_path" ]]; then
  printf "\n‚ùå SSH keys not found. Generating a new key pair...\n"
  source "$HOME/Repos/ooloth/dotfiles/install/ssh.zsh"

  # Check if the key pair was added to the ssh-agent
  if ! ssh-add -l >/dev/null; then
    printf "\n‚ùå Failed to add SSH key to ssh-agent. Please try again.\n"
    exit 1
  fi
fi

printf "\nYour turn!"
printf "\nPlease visit https://github.com/settings/ssh/new now and add the SSH key that has been copied to your clipboard to your GitHub account."
pbcopy < "$public_key_path"
printf "\n‚ö†Ô∏è Actually go do this! This step is required before you'll be able to clone repos via SSH.\n"

vared -p "All set? (y/N)" -c gitHubKeyAdded

if [[ ! "$gitHubKeyAdded" == 'y' ]]; then
  printf "\nYou have chosen...poorly.\n"
  return 0 || exit 0
else
  printf "\nExcellent!\n"
fi

printf "\nüß™ Verifying you can now connect to GitHub via SSH...\n"

if i_can_connect_to_github_via_ssh; then
  printf "\n‚úÖ SSH key was added to GitHub successfully.\n"
else
  printf "\n‚ùå Failed to add SSH key to GitHub. Please try again.\n"
  exit 1
fi

printf "\nüöÄ Done adding your SSH key pair to GitHub."