#!/bin/zsh

#
# Confirmed steps:
#
# 1. Verifying Apple command line developer tools are install and aborting with instructions if not.
#
# Issues:
#
# 1. softwareupdate command - the --restart flag doesn't trigger a restart (look up what those flags
# do)

#
# Inspired by:
#
# https://github.com/nicknisi/dotfiles/blob/master/install.sh
#

################################################################################
# setup
#
# This script is intended to set up a new Mac computer with my dotfiles and
# other development preferences.
################################################################################

COLOR_GRAY="\033[1;38;5;243m"
COLOR_BLUE="\033[1;34m"
COLOR_GREEN="\033[1;32m"
COLOR_RED="\033[1;31m"
COLOR_PURPLE="\033[1;35m"
COLOR_YELLOW="\033[1;33m"
COLOR_NONE="\033[0m"

title() {
  echo -e "\n${COLOR_PURPLE}$1${COLOR_NONE}"
  echo -e "${COLOR_GRAY}==============================${COLOR_NONE}\n"
}

error() {
  echo -e "${COLOR_RED}Error: ${COLOR_NONE}$1"
  exit 1
}

warning() {
  echo -e "${COLOR_YELLOW}Warning: ${COLOR_NONE}$1"
}

info() {
  echo -e "${COLOR_BLUE}Info: ${COLOR_NONE}$1"
}

success() {
  echo -e "${COLOR_GREEN}$1${COLOR_NONE}"
}

bootstrap_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\\n[SETUP] $fmt\\n" "$@"
}

laptop_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\\n[LAPTOP] $fmt\\n" "$@"
}

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

################################################################################
# VARIABLE DECLARATIONS
################################################################################

osname=$(uname)

export BACKUP_DIR="${HOME}/mac-setup-backups"
export BOOTSTRAP_REPO_URL="https://github.com/ooloth/mac-setup.git"
export BOOTSTRAP_DIR="${HOME}/mac-setup"
export COMMANDLINE_TOOLS="/Library/Developer/CommandLineTools"
export DICTIONARY_DIR="${HOME}/Library/Spelling"
export DOTFILES_REPO_URL="https://github.com/ooloth/dotfiles.git"
export DOTFILES_DIR="${HOME}/Repos/ooloth/dotfiles"
export OLD_DOTFILES="${BACKUP_DIR}/old-dotfiles"
export OLD_SSH_CONFIG="${BACKUP_DIR}/old-ssh-config"
export SSH_CONFIG="${HOME}/.ssh/config"

PS3="> "

# Get computer name
# comp=$(scutil --get ComputerName)
# host=$(scutil --get LocalHostName)

# if [ -z "$comp" ] || [ -z "$host" ]; then
#   DEFAULT_COMPUTER_NAME="My Mac"
#   DEFAULT_HOST_NAME="my-mac"
# else
#   DEFAULT_COMPUTER_NAME="$comp"
#   DEFAULT_HOST_NAME="$host"
# fi

DEFAULT_BOOTSTRAP_BRANCH="master"
DEFAULT_DOTFILES_BRANCH="master"

################################################################################
# Make sure we're on a Mac before continuing
################################################################################

if [ "$osname" != "Darwin" ]; then
  bootstrap_echo "Oops, it looks like you're using a non-UNIX system. This script only supports Mac.
  Exiting..."
  exit 1
fi

################################################################################
# Check for presence of command line tools
################################################################################

if [ ! -d "$COMMANDLINE_TOOLS" ]; then
  bootstrap_echo "Apple's command line developer tools must be installed before running this script.
  To install them, run 'xcode-select --install' from the terminal and then follow the prompts. Once
  the command line tools have been installed, you can try running this script again."
  exit 1
fi

################################################################################
# Authenticate
################################################################################

sudo -v

# Keep-alive: update existing `sudo` time stamp until setup has finished
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

set -e

################################################################################
# Welcome and setup
################################################################################

echo
echo "*************************"
echo "* Welcome to Mac Setup! *"
echo "*************************"
echo

printf "Before we get started, let's get some info about your setup.\\n"

printf "\\nThis mac setup script will be cloned from:\\n$BOOTSTRAP_REPO_URL"
printf "\\nWhich branch would you like to use? (Leave blank for default: %s)\\n" "$DEFAULT_BOOTSTRAP_BRANCH"
read -r -p "> " BOOTSTRAP_BRANCH
if [ -n "$BOOTSTRAP_BRANCH" ]; then
  export BOOTSTRAP_BRANCH
else
  export BOOTSTRAP_BRANCH="$DEFAULT_BOOTSTRAP_BRANCH"
fi

printf "\\nThe dotfiles repo will be cloned from:\\n$DOTFILES_REPO_URL"
printf "\\nWhich branch would you like to use? (Leave blank for default: %s)\\n" "$DEFAULT_DOTFILES_BRANCH"
read -r -p "> " DOTFILES_BRANCH
if [ -n "$DOTFILES_BRANCH" ]; then
  export DOTFILES_BRANCH
else
  export DOTFILES_BRANCH="$DEFAULT_DOTFILES_BRANCH"
fi

# printf "\\nEnter a name for your Mac. (Leave blank for default: %s)\\n" "$DEFAULT_COMPUTER_NAME"
# read -r -p "> " COMPUTER_NAME
# export COMPUTER_NAME=${COMPUTER_NAME:-$DEFAULT_COMPUTER_NAME}
#
# printf "\\nEnter a host name for your Mac. (Leave blank for default: %s)\\n" "$DEFAULT_HOST_NAME"
# read -r -p "> " HOST_NAME
# export HOST_NAME=${HOST_NAME:-$DEFAULT_HOST_NAME}

# printf "\\nWhich version of Node.js would you like to install?
# Available versions: https://semver.io/node/versions
# (Leave blank for default: %s)\\n" "$DEFAULT_NODEJS_VERSION"
# read -r -p "> " ASDF_NODEJS_VERSION
# export ASDF_NODEJS_VERSION=${ASDF_NODEJS_VERSION:-$DEFAULT_NODEJS_VERSION}

# printf "\\nWhich version of Ruby would you like to install?
# Available versions: https://raw.githubusercontent.com/postmodern/ruby-versions/master/ruby/versions.txt
# (Leave blank for default: %s)\\n" "$DEFAULT_RUBY_VERSION"
# read -r -p "> " ASDF_RUBY_VERSION
# export ASDF_RUBY_VERSION=${ASDF_RUBY_VERSION:-$DEFAULT_RUBY_VERSION}

# export DEFAULT_SHELL="zsh"

printf "\\nLooks good! Here's what we've got so far:\\n\\n"
printf "mac setup branch: ==> %s\\n" "$BOOTSTRAP_BRANCH"
printf "dotfiles branch:  ==> %s\\n" "$DOTFILES_BRANCH"
# printf "Computer name:    ==> [%s]\\n" "$COMPUTER_NAME"
# printf "Host name:        ==> [%s]\\n" "$HOST_NAME"
# printf "Node.js version:   ==> [%s]\\n" "$ASDF_NODEJS_VERSION"
# printf "Ruby version:      ==> [%s]\\n" "$ASDF_RUBY_VERSION"
# printf "Default shell:    ==> [%s]\\n" "$DEFAULT_SHELL"

echo
read -p "Continue? (y/N) " -n 1 -r
echo
if [[ ! "$REPLY" =~ ^[Yy]$ ]]; then
  echo "Exiting..."
  exit 1
fi

################################################################################
# Clone mac-setup repo + move into it
################################################################################

bootstrap_echo "Cloning mac-setup repo..."

if [ -d "$BOOTSTRAP_DIR" ]; then
  rm -rf "$BOOTSTRAP_DIR"
fi

git clone "$BOOTSTRAP_REPO_URL" -b "$BOOTSTRAP_BRANCH" "$BOOTSTRAP_DIR"

cd $BOOTSTRAP_DIR

################################################################################
# 1. Provision with my adaptation of Laptop (install/laptop)
################################################################################

if [ ! -d "${HOME}/bin/" ]; then
  mkdir "${HOME}/bin"
fi

HOMEBREW_PREFIX="/usr/local"

if [ -d "$HOMEBREW_PREFIX" ]; then
  if ! [ -r "$HOMEBREW_PREFIX" ]; then
    sudo chown -R "${LOGNAME}:admin" "$HOMEBREW_PREFIX"
  fi
else
  sudo mkdir "$HOMEBREW_PREFIX"
  sudo chflags norestricted "$HOMEBREW_PREFIX"
  sudo chown -R "${LOGNAME}:admin" "$HOMEBREW_PREFIX"
fi

# update_zsh_shell() {
#   local shell_path;
#   shell_path="$(command -v zsh)"
#
#   laptop_echo "Changing your shell to zsh ..."
#   if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
#     laptop_echo "Adding '${shell_path}' to /etc/shells"
#     sudo sh -c "echo ${shell_path} >> /etc/shells"
#   fi
#   sudo chsh -s "$shell_path" "$USER"
# }

# gem_install_or_update() {
#   if gem list "$1" --installed > /dev/null; then
#     gem update "$@"
#   else
#     gem install "$@"
#   fi
# }

#
# Homebrew
#

title "Setting up Homebrew..."
if test ! "$(command -v brew)"; then
  info "Homebrew not installed. Installing..."
  # Run as a login shell (non-interactive) so that the script doesn't pause for user input
  curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh | bash --login
fi

# install brew dependencies from Brewfile
brew bundle

# install fzf
echo -e
info "Installing fzf"
"$(brew --prefix)"/opt/fzf/install --key-bindings --completion --no-bash --no-fish --no-update-rc

# if ! command -v brew >/dev/null; then
#   laptop_echo "Installing Homebrew ..."
#   /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
# fi

# if brew list | grep -Fq brew-cask; then
#   laptop_echo "Uninstalling old Homebrew-Cask ..."
#   brew uninstall --force brew-cask
# fi

# npm=(
#     spotify-cli-mac -g
# )

laptop_echo "Updating Homebrew formulae ..."
brew update
brew upgrade

# laptop_echo "Installing homebrew apps..."
# brew install ${brew[@]} #Homebrew App Installer

# laptop_echo "Installing homebrew casks..."
# brew cask install ${cask[@]} #Casks Installer

# laptop_echo "Installing Mac App Store apps..."
# mas install ${mas[@]} #Mac App Store Installer

# laptop_echo "Installing global npm dependencies..."
# npm install ${npm[@]} #Install npm apps

# laptop_echo "Updating Homebrew formulae ..."
# brew update --force # https://github.com/Homebrew/brew/issues/1151
# brew bundle --file=- <<EOF
# tap "homebrew/bundle"
# tap "homebrew/cask"
# tap "homebrew/cask-fonts"
# tap "homebrew/cask-versions"
# tap "homebrew/core"
# tap "homebrew/services"
# tap "puma/puma"
# tap "universal-ctags/universal-ctags"
# # Need to install openssl before libyaml
# brew "openssl"
# brew "openssl@1.1" # wget dependency
# brew "advancecomp"
# brew "ansible"
# brew "asciidoctor"
# brew "autoconf" # asdf dependency
# brew "automake" # asdf dependency
# brew "awscli"
# brew "bash"
# brew "bash-completion"
# brew "bat"
# brew "cloc"
# brew "cmake"
# brew "coreutils"
# brew "diff-so-fancy"
# brew "dos2unix"
# brew "exa"
# brew "fish"
# brew "fontforge"
# brew "fzf"
# brew "gifsicle"
# brew "git"
# brew "git-quick-stats"
# brew "gmp" # Vim dependency
# brew "gnupg" # asdf-nodejs dependency
# brew "highlight"
# brew "htop"
# brew "httpie"
# brew "imagemagick"
# brew "jhead"
# brew "jq"
# brew "less"
# brew "libtermkey"
# brew "libtool" # asdf dependency
# brew "libxslt" # asdf dependency
# brew "libyaml" # asdf dependency
# brew "media-info"
# brew "memcached"
# brew "mono"
# brew "most"
# brew "multitail"
# brew "neovim", args: ["HEAD"]
# brew "onefetch"
# brew "overmind"
# brew "pandoc"
# brew "perl"
# brew "pgcli"
# brew "postgresql", restart_service: true
# brew "puma/puma/puma-dev"
# brew "python"
# brew "ranger", link: false
# brew "readline"
# brew "ripgrep"
# brew "rlwrap"
# brew "rsync"
# brew "shellcheck"
# brew "sqlite"
# brew "ssh-copy-id"
# brew "starship"
# brew "the_silver_searcher"
# brew "tldr"
# brew "tmux"
# brew "trash"
# brew "tree"
# brew "universal-ctags/universal-ctags/universal-ctags", args: ["HEAD"]
# brew "unixodbc" # asdf dependency
# brew "w3m"
# brew "wget"
# brew "xz"
# brew "zsh"
# # homebrew-cask
# # https://github.com/caskroom/homebrew-cask
# cask "font-fira-code-nerd-font"
# cask "alacritty"
# cask "iterm2-beta"
# EOF

laptop_echo "Your shell preference is set to ZSH..."

# laptop_echo "Configuring asdf version manager..."
# if [ ! -d "${HOME}/.asdf" ]; then
#   git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.7.7
# else
#   "${HOME}/.asdf/bin/asdf" update
#   "${HOME}/.asdf/bin/asdf" plugin-update --all
# fi
#
# install_asdf_plugin() {
#   local name="$1"
#   local url="$2"
#
#   if ! asdf plugin-list | grep -Fq "$name"; then
#     asdf plugin-add "$name" "$url"
#   fi
# }
#
# # shellcheck disable=SC1090
# source "${HOME}/.asdf/asdf.sh"
# install_asdf_plugin "ruby" "https://github.com/asdf-vm/asdf-ruby.git"
# install_asdf_plugin "nodejs" "https://github.com/asdf-vm/asdf-nodejs.git"
#
# install_asdf_language() {
#   local language="$1"
#   local version="$2"
#   asdf install "$language" "$version"
#   asdf global "$language" "$version"
# }
#
# laptop_echo "Installing Ruby..."
# install_asdf_language "ruby" "$ASDF_RUBY_VERSION"
# laptop_echo "Checking which Ruby and Gem installs we are using at this point..."
# echo "Ruby --> $(command -v ruby)"
# ruby -v
# echo "Gem --> $(command -v gem)"
# gem -v
# gem update --system
# number_of_cores=$(sysctl -n hw.ncpu)
# bundle config --global jobs $((number_of_cores - 1))
#
# laptop_echo "Installing default gems..."
# gem install bundler
# gem install haml_lint
# gem install neovim
# gem install pry
# gem install rubocop
# gem install tmuxinator
# gem install solargraph
#
# laptop_echo "Installing Node..."
# bash "${HOME}/.asdf/plugins/nodejs/bin/import-release-team-keyring"
# install_asdf_language "nodejs" "$ASDF_NODEJS_VERSION"
# echo "Node --> $(command -v node)"
# node -v
# echo "NPM --> $(command -v npm)"
# npm -v

# laptop_echo "Installing Python support for Neovim..."
# echo "Python 3 --> $(command -v python3)"
# python3 --version
# echo "Python 2 --> $(command -v python)"
# python --version
# sudo easy_install pip
# python3 -m pip install --user --upgrade pynvim
# python2 -m pip install --user --upgrade pynvim

laptop_echo "Laptop installation completed successfully!"

################################################################################
# 2. Install Oh My Zsh
################################################################################

bootstrap_echo "Step 2: Installing Oh My Zsh..."

if [ -d "${HOME}/.oh-my-zsh" ]; then
  rm -rf "${HOME}/.oh-my-zsh"
fi

git clone https://github.com/robbyrussell/oh-my-zsh.git "${HOME}/.oh-my-zsh"

if [ -d /usr/local/share/zsh ]; then
  bootstrap_echo "Setting permissions for /usr/local/share/zsh..."
  sudo chmod -R 755 /usr/local/share/zsh
fi

if [ -d /usr/local/share/zsh/site-functions ]; then
  bootstrap_echo "Setting permissions for /usr/local/share/zsh/site-functions..."
  sudo chmod -R 755 /usr/local/share/zsh/site-functions
fi

bootstrap_echo "Done!"

#
# CREATE BACKUP DIRECTORY
#

if [[ ! -d $BACKUP_DIR ]]; then
  bootstrap_echo "\nCreating backup directory..."
  mkdir $BACKUP_DIR
fi

################################################################################
# 7. Setup dotfiles (http://jsua.co/dotfiles)
################################################################################

bootstrap_echo "Step 7: Installing dotfiles..."

# Back up any existing dotfiles
if [[ -d $DOTFILES_DIR ]]; then
  bootstrap_echo "Backing up old dotfiles to ${BACKUP_DIR}..."
  rm -rf "$OLD_DOTFILES"                # remove any previous backup
  cp -R "$DOTFILES_DIR" "$OLD_DOTFILES" # backup the existing dotfiles folder
  rm -rf "$DOTFILES_DIR"                # remove the dotfiles folder
fi

# Clone a fresh dotfiles folder
bootstrap_echo "Cloning dotfiles repo to ${DOTFILES_DIR} ..."
git clone "$DOTFILES_REPO_URL" -b "$DOTFILES_BRANCH" "$DOTFILES_DIR"

# shellcheck source=/dev/null
# source "${DOTFILES_DIR}/install.sh"

bootstrap_echo "Done!"

################################################################################
# Generate SSH keys
################################################################################

echo "Creating an SSH key..."

# silent output, "id_rsa", overwrite existing, no password
# https://security.stackexchange.com/a/23385
# https://stackoverflow.com/a/43235320
ssh-keygen -q -t rsa -b 2048 -N '' <<< ""$'\n'"y" 2>&1 >/dev/null

echo "Adding SSH key to ssh-agent..."

# https://docs.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#adding-your-ssh-key-to-the-ssh-agent
eval "$(ssh-agent -s)" # confirm the agent is running (if not, this will start it)

# If an SSH config file exists, move it to the backup folder
if [[ -f $HOME/.ssh/config ]]; then
  bootstrap_echo "Backing up old SSH config to ${BACKUP_DIR}..."
  rm -rf "$OLD_SSH_CONFIG"           # remove any previous backup
  mv "$SSH_CONFIG" "$OLD_SSH_CONFIG" # backup the existing ssh config
fi

# Update SSH config to automatically load keys in ssh-agent and store passphrases in Keychain
# https://docs.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent
cp $HOME/mac-setup/ssh-config $HOME/.ssh/config

# Add SSH private key to ssh-agent and store the passphrase in Keychain
ssh-add -K ~/.ssh/id_rsa

echo "\\nPlease visit https://github.com/settings/ssh/new and enter the following public key:\\n"
echo "https://github.com/settings/ssh/new\\n"

cat $HOME/.ssh/id_rsa.pub

read -p "\nPress [Enter] when you've finished saving the key on GitHub. (You'll test your ability to
connect to GitHub via SSH after this setup script has finished)\\n..."

################################################################################
# 3. Set macOS preferences
################################################################################

bootstrap_echo "Step 3: Setting macOS preferences..."

# shellcheck source=/dev/null
source "${BOOTSTRAP_DIR}/macos-defaults"

bootstrap_echo "Done!"

# Clean up
cd $HOME
rm -rf "$BOOTSTRAP_DIR"

echo
echo "***********************"
echo "* Mac setup complete! *"
echo "***********************"

echo "\\nTo apply your your preferences, your computer needs to restart."
read -p "\\nAre you ready to restart now? (y/N) " -n 1 -r
echo
if [[ "$REPLY" =~ ^[Yy]$ ]]; then
  echo "Excellent choice. When your Mac has restarted, remember to complete the following tasks to
  wrap up:\\n"

  echo "1. Confirm you can connect to GitHub via SSH by running `ssh -T git@github.com`. If you see
  "Permission denied (public key).", that means the SSH key you entered in GitHub doesn't match the
  SSH key on your Mac. Try adding it again as a new key, being careful to include everything you see
  in your `~/.ssh/id_rsa.pub` file."

  # echo "2. Complete post-install tasks from the dotfiles README."

  echo "3. Set up your desired macOS keyboard shortcuts (e.g. for Alfred, Things, etc)"

  echo "\\nRestarting..."

  sudo shutdown -r now
else
  echo "No worries! Just remember to restart manually as soon as you can and then complete these
  follow-up tasks:"

  echo "1. Confirm you can connect to GitHub via SSH by running `ssh -T git@github.com`. If you see
  "Permission denied (public key).", that means the SSH key you entered in GitHub doesn't match the
  SSH key on your Mac. Try adding it again as a new key, being careful to include everything you see
  in your `~/.ssh/id_rsa.pub` file."

  # echo "2. Complete post-install tasks from the dotfiles README."

  echo "3. Set up your desired macOS keyboard shortcuts (e.g. for Alfred, Things, etc)"

  exit 1
fi
