#!/usr/bin/env bash

################################################################################
# setup
#
# This script is intended to set up a new Mac computer with my dotfiles and
# other development preferences.
################################################################################

bootstrap_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\\n[SETUP] $fmt\\n" "$@"
}

laptop_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\\n[LAPTOP] $fmt\\n" "$@"
}

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

################################################################################
# VARIABLE DECLARATIONS
################################################################################

osname=$(uname)

export COMMANDLINE_TOOLS="/Library/Developer/CommandLineTools"
export OLD_DOTFILES_BAK="${HOME}/old_dotfiles_backup"
export DICTIONARY_DIR="${HOME}/Library/Spelling"
export DOTFILES_REPO_URL="https://github.com/ooloth/dotfiles.git"
export DOTFILES_DIR="${HOME}/dotfiles"
export BOOTSTRAP_REPO_URL="https://github.com/ooloth/dotfiles.git"
export BOOTSTRAP_DIR="${HOME}/dotfiles"

PS3="> "

comp=$(scutil --get ComputerName)
host=$(scutil --get LocalHostName)

if [ -z "$comp" ] || [ -z "$host" ]; then
  DEFAULT_COMPUTER_NAME="My Mac Computer"
  DEFAULT_HOST_NAME="my-mac-computer"
else
  DEFAULT_COMPUTER_NAME="$comp"
  DEFAULT_HOST_NAME="$host"
fi

DEFAULT_BOOTSTRAP_VERSION="v5.1.5"
DEFAULT_DOTFILES_BRANCH="master"
DEFAULT_TIME_ZONE="Europe/Kiev"
DEFAULT_NODEJS_VERSION="12.18.3"
DEFAULT_RUBY_VERSION="2.7.1"

# Make sure we're on a Mac
if [ "$osname" != "Darwin" ]; then
  bootstrap_echo "Oops, it looks like you're using a non-UNIX system. This script
only supports Mac. Exiting..."
  exit 1
fi

################################################################################
# Make sure we're on a Mac before continuing
################################################################################

if [ "$osname" != "Darwin" ]; then
  bootstrap_echo "Oops, it looks like you're using a non-UNIX system. This script
only supports Mac. Exiting..."
  exit 1
fi

################################################################################
# Check for presence of command line tools if macOS
################################################################################

if [ ! -d "$COMMANDLINE_TOOLS" ]; then
  bootstrap_echo "Apple's command line developer tools must be installed before
running this script. To install them, just run 'xcode-select --install' from
the terminal and then follow the prompts. Once the command line tools have been
installed, you can try running this script again."
  exit 1
fi

################################################################################
# Authenticate
################################################################################

sudo -v

# Keep-alive: update existing `sudo` time stamp until bootstrap has finished
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

set -e

################################################################################
# Welcome and setup
################################################################################

echo
echo "*************************"
echo "* Welcome to Mac Setup! *"
echo "*************************"
echo

printf "Before we get started, let's get some info about your setup.\\n"

# printf "\\ script will be cloned from:
# ==> %s.\\n" "$BOOTSTRAP_REPO_URL"
# printf "Which version should we use? (Leave blank for default: %s)\\n" "$DEFAULT_BOOTSTRAP_VERSIO"
# read -r -p "> " BOOTSTRAP_VERSION
# if [ -n "$BOOTSTRAP_VERSION" ]; then
#   export BOOTSTRAP_VERSION
# else
#   export BOOTSTRAP_VERSION="$DEFAULT_BOOTSTRAP_VERSION"
# fi

printf "\\nThis mac setup script will be cloned from:
==> %s.\\n" "$DOTFILES_REPO_URL"
printf "Which branch should we use? (Leave blank for default: %s)\\n" "$DEFAULT_DOTFILES_BRANCH"
read -r -p "> " DOTFILES_BRANCH
if [ -n "$DOTFILES_BRANCH" ]; then
  export DOTFILES_BRANCH
else
  export DOTFILES_BRANCH="$DEFAULT_DOTFILES_BRANCH"
fi

printf "\\nEnter a name for your Mac. (Leave blank for default: %s)\\n" "$DEFAULT_COMPUTER_NAME"
read -r -p "> " COMPUTER_NAME
export COMPUTER_NAME=${COMPUTER_NAME:-$DEFAULT_COMPUTER_NAME}

printf "\\nEnter a host name for your Mac. (Leave blank for default: %s)\\n" "$DEFAULT_HOST_NAME"
read -r -p "> " HOST_NAME
export HOST_NAME=${HOST_NAME:-$DEFAULT_HOST_NAME}

printf "\\nEnter your desired time zone.
To view available options run \`sudo systemsetup -listtimezones\`
(Leave blank for default: %s)\\n" "$DEFAULT_TIME_ZONE"
read -r -p "> " TIME_ZONE
export TIME_ZONE=${TIME_ZONE:-$DEFAULT_TIME_ZONE}

# printf "\\nWhich version of Node.js would you like to install?
# Available versions: https://semver.io/node/versions
# (Leave blank for default: %s)\\n" "$DEFAULT_NODEJS_VERSION"
# read -r -p "> " ASDF_NODEJS_VERSION
# export ASDF_NODEJS_VERSION=${ASDF_NODEJS_VERSION:-$DEFAULT_NODEJS_VERSION}

# printf "\\nWhich version of Ruby would you like to install?
# Available versions: https://raw.githubusercontent.com/postmodern/ruby-versions/master/ruby/versions.txt
# (Leave blank for default: %s)\\n" "$DEFAULT_RUBY_VERSION"
# read -r -p "> " ASDF_RUBY_VERSION
# export ASDF_RUBY_VERSION=${ASDF_RUBY_VERSION:-$DEFAULT_RUBY_VERSION}

export DEFAULT_SHELL="zsh"

printf "\\nLooks good. Here's what we've got so far.\\n"
# printf "Bootstrap version: ==> [%s]\\n" "$BOOTSTRAP_VERSION"
printf "Dotfiles branch:   ==> [%s]\\n" "$DOTFILES_BRANCH"
printf "Computer name:     ==> [%s]\\n" "$COMPUTER_NAME"
printf "Host name:         ==> [%s]\\n" "$HOST_NAME"
printf "Time zone:         ==> [%s]\\n" "$TIME_ZONE"
# printf "Node.js version:   ==> [%s]\\n" "$ASDF_NODEJS_VERSION"
# printf "Ruby version:      ==> [%s]\\n" "$ASDF_RUBY_VERSION"
printf "Default shell:     ==> [%s]\\n" "$DEFAULT_SHELL"

echo
read -p "Continue? (y/n) " -n 1 -r
echo
if [[ ! "$REPLY" =~ ^[Yy]$ ]]; then
  echo "Exiting..."
  exit 1
fi

################################################################################
# Clone dotfiles repo
################################################################################

bootstrap_echo "Cloning dotfiles repo..."

if [[ -d $DOTFILES_DIR ]]; then
  bootstrap_echo "Backing up old dotfiles to ${HOME}/old_dotfiles_bak..."
  rm -rf "$OLD_DOTFILES_BAK"
  cp -R "$DOTFILES_DIR" "$OLD_DOTFILES_BAK"
  rm -rf "$DOTFILES_DIR"
fi

bootstrap_echo "Cloning dotfiles repo to ${DOTFILES_DIR} ..."

git clone "$DOTFILES_REPO_URL" -b "$DOTFILES_BRANCH" "$DOTFILES_DIR"

################################################################################
# 1. Provision with my adaptation of Laptop (install/laptop)
################################################################################

if [ ! -d "${HOME}/bin/" ]; then
  mkdir "${HOME}/bin"
fi

HOMEBREW_PREFIX="/usr/local"

if [ -d "$HOMEBREW_PREFIX" ]; then
  if ! [ -r "$HOMEBREW_PREFIX" ]; then
    sudo chown -R "${LOGNAME}:admin" /usr/local
  fi
else
  sudo mkdir "$HOMEBREW_PREFIX"
  sudo chflags norestricted "$HOMEBREW_PREFIX"
  sudo chown -R "${LOGNAME}:admin" "$HOMEBREW_PREFIX"
fi

# update_fish_shell() {
#   local shell_path;
#   shell_path="$(command -v fish)"
#
#   laptop_echo "Changing your shell to fish ..."
#   if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
#     laptop_echo "Adding '${shell_path}' to /etc/shells"
#     echo "$shell_path" | sudo tee -a /etc/shells
#   fi
#   sudo chsh -s "$shell_path" "$USER"
# }

update_zsh_shell() {
  local shell_path;
  shell_path="$(command -v zsh)"

  laptop_echo "Changing your shell to zsh ..."
  if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
    laptop_echo "Adding '${shell_path}' to /etc/shells"
    sudo sh -c "echo ${shell_path} >> /etc/shells"
  fi
  sudo chsh -s "$shell_path" "$USER"
}

# gem_install_or_update() {
#   if gem list "$1" --installed > /dev/null; then
#     gem update "$@"
#   else
#     gem install "$@"
#   fi
# }

if ! command -v brew >/dev/null; then
  laptop_echo "Installing Homebrew ..."
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
fi

# if brew list | grep -Fq brew-cask; then
#   laptop_echo "Uninstalling old Homebrew-Cask ..."
#   brew uninstall --force brew-cask
# fi

brew=(
    adns
    aom
    bash
    bdw-gc
    cairo
    cfitsio
    cliclick
    curl
    emacs
    ffmpeg
    flac
    fontconfig
    fortune
    freetype
    frei0r
    fribidi
    fzf
    gdbm
    gdk-pixbuf
    gettext
    ghostscript
    giflib
    git
    glib
    gmime
    gmp
    gnu-getopt
    gnupg
    gnutls
    go
    gotop
    gpgme
    graphite2
    grep
    harfbuzz
    htop
    icu4c
    ilmbase
    imagemagick
    isl
    jpeg
    lame
    leptonica
    libass
    libassuan
    libbluray
    libcroco
    libde265
    libevent
    libffi
    libgcrypt
    libgpg-error
    libheif
    libidn
    libidn2
    libksba
    libmpc
    libogg
    libomp
    libpng
    librsvg
    libsamplerate
    libsndfile
    libsoxr
    libtasn1
    libtermkey
    libtiff
    libtool
    libunistring
    libusb
    libuv
    libvidstab
    libvorbis
    libvpx
    libvterm
    libyaml
    little-cms2
    lmdb
    lolcat
    lua
    luajit
    lzo
    mas
    mpfr
    msgpack
    ncurses
    neofetch
    neomutt
    neovim
    nettle
    node
    notmuch
    npth
    opencore-amr
    openexr
    openjpeg
    openssl@1.1
    opus
    p11-kit
    pango
    pass
    pcre
    pcre2
    perl
    pinentry
    pixman
    pkg-config
    python
    python@3.8
    qrencode
    readline
    ripgrep
    rtmpdump
    rtv
    rubberband
    ruby
    screenresolution
    sdl2
    shared-mime-info
    snappy
    speedtest-cli
    speex
    sqlite
    talloc
    tesseract
    theora
    tmux
    tokyo-cabinet
    transmission-cli
    tree
    tty-clock
    typespeed
    unbound
    unibilium
    unrar
    utf8proc
    vifm
    webp
    wget
    x264
    x265
    xapian
    xvid
    xz
    youtube-dl
    zlib
)

cask=(
    alacritty
    alfred
    balenaetcher
    bitbar
    calibre
    day-o
    dozer
    dropbox
    edex-ui
    fantastical
    firefox
    handbrake
    java
    keka
    keycastr
    lastpass
    macmediakeyforwarder
    meteorologist
    minecraft
    nvalt
    obs
    plex-media-player
    pocket-casts
    qutebrowser
    rectangle
    spotify
    switchresx
    tor-browser
    typora
    virtualbox
    vlc
) #GUI apps that install with cask

mas=(
    1287239339 #ColorSlurp
    1438841416 #Rename X
    553754186 #Slugline
    1171820258 #Highland 2
    409201541 #Pages
    409203825 #Numbers
    409183694 #Keynote
    497799835 #Xcode
) #Mac App Store apps I install

npm=(
    spotify-cli-mac -g
)

laptop_echo "Updating Homebrew formulae ..."
brew update
brew upgrade

laptop_echo "Installing homebrew apps..."
brew install ${brew[@]} #Homebrew App Installer

laptop_echo "Installing homebrew casks..."
brew cask install ${cask[@]} #Casks Installer

laptop_echo "Installing Mac App Store apps..."
mas install ${mas[@]} #Mac App Store Installer

laptop_echo "Installing global npm dependencies..."
npm install ${npm[@]} #Install npm apps

# laptop_echo "Updating Homebrew formulae ..."
# brew update --force # https://github.com/Homebrew/brew/issues/1151
# brew bundle --file=- <<EOF
# tap "homebrew/bundle"
# tap "homebrew/cask"
# tap "homebrew/cask-fonts"
# tap "homebrew/cask-versions"
# tap "homebrew/core"
# tap "homebrew/services"
# tap "puma/puma"
# tap "universal-ctags/universal-ctags"
# # Need to install openssl before libyaml
# brew "openssl"
# brew "openssl@1.1" # wget dependency
# brew "advancecomp"
# brew "ansible"
# brew "asciidoctor"
# brew "autoconf" # asdf dependency
# brew "automake" # asdf dependency
# brew "awscli"
# brew "bash"
# brew "bash-completion"
# brew "bat"
# brew "cloc"
# brew "cmake"
# brew "coreutils"
# brew "diff-so-fancy"
# brew "dos2unix"
# brew "exa"
# brew "fish"
# brew "fontforge"
# brew "fzf"
# brew "gifsicle"
# brew "git"
# brew "git-quick-stats"
# brew "gmp" # Vim dependency
# brew "gnupg" # asdf-nodejs dependency
# brew "highlight"
# brew "htop"
# brew "httpie"
# brew "imagemagick"
# brew "jhead"
# brew "jq"
# brew "less"
# brew "libtermkey"
# brew "libtool" # asdf dependency
# brew "libxslt" # asdf dependency
# brew "libyaml" # asdf dependency
# brew "media-info"
# brew "memcached"
# brew "mono"
# brew "most"
# brew "multitail"
# brew "neovim", args: ["HEAD"]
# brew "onefetch"
# brew "overmind"
# brew "pandoc"
# brew "perl"
# brew "pgcli"
# brew "postgresql", restart_service: true
# brew "puma/puma/puma-dev"
# brew "python"
# brew "ranger", link: false
# brew "readline"
# brew "ripgrep"
# brew "rlwrap"
# brew "rsync"
# brew "shellcheck"
# brew "sqlite"
# brew "ssh-copy-id"
# brew "starship"
# brew "the_silver_searcher"
# brew "tldr"
# brew "tmux"
# brew "trash"
# brew "tree"
# brew "universal-ctags/universal-ctags/universal-ctags", args: ["HEAD"]
# brew "unixodbc" # asdf dependency
# brew "w3m"
# brew "wget"
# brew "xz"
# brew "zsh"
# # homebrew-cask
# # https://github.com/caskroom/homebrew-cask
# cask "font-fira-code-nerd-font"
# cask "alacritty"
# cask "iterm2-beta"
# EOF

case "$DEFAULT_SHELL" in
  fish)
    laptop_echo "Your shell preference is set to FISH..."
    update_fish_shell
    ;;
  zsh)
    laptop_echo "Your shell preference is set to ZSH..."
    update_zsh_shell
    ;;
  *)
    laptop_echo "No shell preference detected. Using FISH..."
    update_fish_shell
    ;;
esac

laptop_echo "Configuring asdf version manager..."
if [ ! -d "${HOME}/.asdf" ]; then
  git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.7.7
else
  "${HOME}/.asdf/bin/asdf" update
  "${HOME}/.asdf/bin/asdf" plugin-update --all
fi

install_asdf_plugin() {
  local name="$1"
  local url="$2"

  if ! asdf plugin-list | grep -Fq "$name"; then
    asdf plugin-add "$name" "$url"
  fi
}

# shellcheck disable=SC1090
source "${HOME}/.asdf/asdf.sh"
install_asdf_plugin "ruby" "https://github.com/asdf-vm/asdf-ruby.git"
install_asdf_plugin "nodejs" "https://github.com/asdf-vm/asdf-nodejs.git"

install_asdf_language() {
  local language="$1"
  local version="$2"
  asdf install "$language" "$version"
  asdf global "$language" "$version"
}

laptop_echo "Installing Ruby..."
install_asdf_language "ruby" "$ASDF_RUBY_VERSION"
laptop_echo "Checking which Ruby and Gem installs we are using at this point..."
echo "Ruby --> $(command -v ruby)"
ruby -v
echo "Gem --> $(command -v gem)"
gem -v
gem update --system
number_of_cores=$(sysctl -n hw.ncpu)
bundle config --global jobs $((number_of_cores - 1))

laptop_echo "Installing default gems..."
gem install bundler
gem install haml_lint
gem install neovim
gem install pry
gem install rubocop
gem install tmuxinator
gem install solargraph

laptop_echo "Installing Node..."
bash "${HOME}/.asdf/plugins/nodejs/bin/import-release-team-keyring"
install_asdf_language "nodejs" "$ASDF_NODEJS_VERSION"
echo "Node --> $(command -v node)"
node -v
echo "NPM --> $(command -v npm)"
npm -v

laptop_echo "Installing default npm packages..."
npm install -g @vue/cli
npm install -g gulp-cli
npm install -g http-server
npm install -g neovim
npm install -g pug
npm install -g stylelint
npm install -g typescript
npm install -g vue-language-server

laptop_echo "Installing Python support for Neovim..."
echo "Python 3 --> $(command -v python3)"
python3 --version
echo "Python 2 --> $(command -v python)"
python --version
sudo easy_install pip
python3 -m pip install --user --upgrade pynvim
python2 -m pip install --user --upgrade pynvim

# if [ ! -d "${HOME}/.yarn" ]; then
#   laptop_echo "Installing Yarn..."
#   curl -o- -L https://yarnpkg.com/install.sh | bash
# fi

laptop_echo "Laptop installation completed successfully!"

################################################################################
# 2. Install Oh My Zsh
################################################################################

if [ "$DEFAULT_SHELL" == "zsh" ]; then
  bootstrap_echo "Step 2: Installing Oh My Zsh..."

  if [ -d "${HOME}/.oh-my-zsh" ]; then
    rm -rf "${HOME}/.oh-my-zsh"
  fi

  git clone https://github.com/robbyrussell/oh-my-zsh.git "${HOME}/.oh-my-zsh"

  if [ -d /usr/local/share/zsh ]; then
    bootstrap_echo "Setting permissions for /usr/local/share/zsh..."
    sudo chmod -R 755 /usr/local/share/zsh
  fi

  if [ -d /usr/local/share/zsh/site-functions ]; then
    bootstrap_echo "Setting permissions for /usr/local/share/zsh/site-functions..."
    sudo chmod -R 755 /usr/local/share/zsh/site-functions
  fi

  bootstrap_echo "Done!"
else
  bootstrap_echo "Step 2: Zsh not selected. Skipping Oh My Zsh installation."
fi

################################################################################
# 7. Setup dotfiles (http://jsua.co/dotfiles)
################################################################################

bootstrap_echo "Step 7: Installing dotfiles..."

if [[ -d $DOTFILES_DIR ]]; then
  bootstrap_echo "Backing up old dotfiles to ${HOME}/old_dotfiles_bak..."
  rm -rf "$OLD_DOTFILES_BAK"
  cp -R "$DOTFILES_DIR" "$OLD_DOTFILES_BAK"
  rm -rf "$DOTFILES_DIR"
fi

bootstrap_echo "Cloning dotfiles repo to ${DOTFILES_DIR} ..."

git clone "$DOTFILES_REPO_URL" -b "$DOTFILES_BRANCH" "$DOTFILES_DIR"

# shellcheck source=/dev/null
source "${DOTFILES_DIR}/install.sh"

bootstrap_echo "Done!"

# rm -rf "$BOOTSTRAP_DIR"

################################################################################
# 3. Set macOS preferences
################################################################################

bootstrap_echo "Step 3: Setting macOS preferences..."

# shellcheck source=/dev/null
source "${BOOTSTRAP_DIR}/setup/macos-defaults"

bootstrap_echo "Done!"

killall dock
killall Finder
killall SystemUIServer
killall Mail
killall TextEdit
killall QuickTimePlayerX
killall Photos

echo 'Installation Complete'
echo 'Now you can make an SSH key:'
echo "Press CONTROL+C, if you don't want to"

ssh-keygen -t  ecdsa -b 521

echo
echo "*****************************************************"
echo "* Mac setup complete! Please restart your computer. *"
echo "*****************************************************"
echo
